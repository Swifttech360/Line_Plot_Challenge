Index: Real_Graph_Challenge.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>BackEnd_TopBoarder = (\"\", \"\", \"\", \"\", \"\", \"\")\r\nBackEnd_Line1 = (\"\", 1, 2, 3, 4, \"\")\r\nBackEnd_Line2 = (\"\", 5, 6, 7, 8, \"\")\r\nBackEnd_Line3 = (\"\", 9, 10, 11, 12, \"\")\r\nBackEnd_Line4 = (\"\", 13, 14, 15, 16, \"\")\r\nBackEnd_BottomBoarder = (\"\", \"\", \"\", \"\", \"\", \"\")\r\nbackEndLineList = (BackEnd_TopBoarder, BackEnd_Line1, BackEnd_Line2, BackEnd_Line3, BackEnd_Line4,\r\n                   BackEnd_BottomBoarder)\r\ndef devmode():\r\n    print(f\"{BackEnd_Line1}\\n{BackEnd_Line2}\\n {BackEnd_Line3}\\n {BackEnd_Line4}\")\r\n    exit()\r\nwhile True:\r\n    topBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n    line1 = [\"\", 0, 0, 0, 0, \"\"]\r\n    line2 = [\"\", 0, 0, 0, 0, \"\"]\r\n    line3 = [\"\", 0, 0, 0, 0, \"\"]\r\n    line4 = [\"\", 0, 0, 0, 0, \"\"]\r\n    bottomBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n    lineList = [topBoarder, line1, line2, line3, line4, bottomBoarder]\r\n    coordCheckList = []\r\n    isConnected = True\r\n    backEndConnected = False\r\n\r\n\r\n    def display_graph():\r\n        stringPrintList = \"\"\r\n        for current in range(6):\r\n            for cCurrent in range(6):\r\n                if lineList[int(current) - 1][int(cCurrent) - 1] != \"\":\r\n                    stringPrintList += (str(lineList[int(current) - 1][int(cCurrent) - 1])) + \"  \"\r\n            stringPrintList += \"\\n\"\r\n        print(stringPrintList)\r\n\r\n    display_graph()\r\n\r\n    print('Enter two numbers (1 - 4) separated by a space to add a point to the graph (i.e,\"x y\")')\r\n    while True:\r\n        insQ = input(\"Where would you like to insert marks?:\\n\")\r\n        if insQ in (\"exit\", \"devmode\"):\r\n            devmode()\r\n\r\n\r\n        #print(selection)\r\n        if insQ in (\"break\", \"next\"):\r\n            break\r\n        selection = insQ.split()\r\n        try:\r\n            checker = int(selection[0]) + int(selection[1])\r\n        except ValueError:\r\n            print(\"Those aren't two integers, dummy\")\r\n            continue\r\n\r\n        if int(selection[0] or selection[1]) > 4 or int(selection[0] or selection[1]) < 1:\r\n            print(\"Numbers are out of range\")\r\n            continue\r\n        #enter the solution here\r\n        if lineList[int(selection[1])][int(selection[0])] == 0:\r\n            lineList[int(selection[1])][int(selection[0])] = 1\r\n            display_graph()\r\n\r\n        elif lineList[int(selection[1])][int(selection[0])] == 1:\r\n            lineList[int(selection[1])][int(selection[0])] = 0\r\n            display_graph()\r\n\r\n\r\n\r\n    loopNum = 1\r\n\r\n    while loopNum < 2:\r\n\r\n        StrPrevConQuestion = input(f\"enter point #{loopNum}: \")\r\n        if StrPrevConQuestion in (\"break\", \"next\"):\r\n            print(\"please enter at least two points first\")\r\n            continue\r\n        prevConQuestion = StrPrevConQuestion.split()\r\n        try:\r\n            checker = int(prevConQuestion[0]) + int(prevConQuestion[1])\r\n        except ValueError:\r\n            print(\"Those aren't two points, dummy\")\r\n            StrPrevConQuestion = \"\"\r\n            prevConQuestion = ''\r\n            continue\r\n        loopNum += 1\r\n        coordCheckList.append(prevConQuestion)\r\n\r\n    while True:\r\n\r\n        StrConQuestion = input(f\"enter point #{loopNum}: \")\r\n        if StrConQuestion in (\"break\", \"next\"):\r\n            break\r\n        conQuestion = StrConQuestion.split()\r\n        try:\r\n            checker = int(conQuestion[0]) + int(conQuestion[1])\r\n        except ValueError:\r\n            print(\"Those aren't two points, dummy\")\r\n            continue\r\n        loopNum += 1\r\n        coordCheckList.append(conQuestion)\r\n        display_graph()\r\n        # for some reason, the loop below will always return false, saying that the current coord does not equal\r\n        # itself\r\n        for (i, coord) in enumerate(coordCheckList):\r\n\r\n             if backEndLineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != backEndLineList[int(\r\n                    coord[1])][int(coord[0])]:\r\n             #downRight Check\r\n              if backEndLineList[int(prevConQuestion[1]) + 1][int(prevConQuestion[0]) + 1] != backEndLineList[int(\r\n                    coord[1])][int(coord[0])]:\r\n               #right check\r\n               if backEndLineList[int(prevConQuestion[1])][int(prevConQuestion[0]) + 1] != backEndLineList\\\r\n                  [int(coord[1])][int(coord[0])]:\r\n                #upRight Check\r\n                if backEndLineList[int(prevConQuestion[1]) - 1][int(prevConQuestion[0]) + 1] != backEndLineList\\\r\n                    [int(coord[1])][int(coord[0])]:\r\n                  #Up Check\r\n                  if backEndLineList[int(prevConQuestion[1]) - 1][int(prevConQuestion[0])] !=backEndLineList\\\r\n                    [int(coord[1])][int(coord[0])]:\r\n                    print(f\"{coord} isn't sonnected to {prevConQuestion}\")\r\n                    backEndConnected = False\r\n\r\n\r\n             else: pass\r\n        if backEndConnected:\r\n            print('yipeee')\r\n\r\n\r\n        else:\r\n            print('160 degree connection test failed')\r\n\r\n\r\n\r\n        # for some reason, the loop below will always return false, saying that the currend coord does not equal\r\n        # itself\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#________________________________________________PREV_CON_QUESTION_CHECKS______________________________________________#\r\n          #downRight check\r\n        # noinspection PyUnboundLocalVariable\r\n        if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != (lineList[int(prevConQuestion[1]) + 1][int(\r\n          prevConQuestion[0]) + 1]):\r\n            #right Check\r\n          if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1])][\r\n            int(prevConQuestion[0]) + 1]:\r\n              #upRight Check\r\n            if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1]) - 1][\r\n              int(prevConQuestion[0]) + 1]:\r\n                #Up Check\r\n              if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1])- 1]\\\r\n                [int(prevConQuestion[0])]:\r\n                  #upLeft Check\r\n                if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1]) - 1]\\\r\n                  [int(prevConQuestion[0]) - 1]:\r\n                    #Left Check\r\n                  if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1])][\r\n                    int(prevConQuestion[0]) - 1]:\r\n                      #downLeft Check\r\n                    if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1])\r\n                      + 1][int(prevConQuestion[0]) - 1]:\r\n                        #Down Check\r\n                      if lineList[int(prevConQuestion[1])][int(prevConQuestion[0])] != lineList[int(prevConQuestion[1])\\\r\n                        + 1][int(prevConQuestion[0])]:\r\n                        isConnected = False\r\n                        print(\"These points are not connected because no points of the same value touch prevConQuestion\")\r\n#___________________________________________________CON_QUESTION_CHECKS________________________________________________#\r\n         #downRight check\r\n        if lineList[int(conQuestion[1])][int(conQuestion[0])] != (lineList[int(conQuestion[1]) + 1][int(\r\n          conQuestion[0]) + 1]):\r\n            #right Check\r\n          if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1])][\r\n            int(conQuestion[0]) + 1]:\r\n              #upRight Check\r\n            if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1]) - 1][\r\n              int(conQuestion[0]) + 1]:\r\n                #Up Check\r\n              if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1])- 1]\\\r\n                [int(conQuestion[0])]:\r\n                  #upLeft Check\r\n                if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1]) - 1]\\\r\n                  [int(conQuestion[0]) - 1]:\r\n                    #Left Check\r\n                  if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1])][\r\n                    int(conQuestion[0]) - 1]:\r\n                      #downLeft Check\r\n                    if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1])\r\n                      + 1][int(conQuestion[0]) - 1]:\r\n                        #Down Check\r\n                      if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(conQuestion[1])\\\r\n                        + 1][int(conQuestion[0])]:\r\n                        isConnected = False\r\n                        print(\"These points are not connected because no points of the same value touch conQuestion\")\r\n\r\n        if lineList[int(conQuestion[1])][int(conQuestion[0])] != lineList[int(prevConQuestion[1])][int(\r\n        prevConQuestion[0])]:\r\n            print(\"These points are not connected because they are not the same value\")\r\n            isConnected = False\r\n\r\n\r\n\r\n\r\n\r\n        if isConnected:\r\n            print(\"True so far\")\r\n        else: print(\"Points no longer connected\")\r\n\r\n        StrPrevConQuestion = input(f\"enter point #{loopNum}\")\r\n        if StrPrevConQuestion in (\"break\", \"next\"):\r\n            break\r\n        prevConQuestion = StrPrevConQuestion.split()\r\n        try:\r\n            checker = int(prevConQuestion[0]) + int(prevConQuestion[1])\r\n        except ValueError:\r\n            print(\"Those aren't two points, dummy\")\r\n            loopNum -= 1\r\n            continue\r\n        loopNum += 1\r\n        coordCheckList.append(prevConQuestion)\r\n    if isConnected:\r\n        print(\"True\")\r\n    else:\r\n        print(\"False\")\r\n    again = input(\"again? y/n\").upper()\r\n    if again == \"N\":\r\n        break\r\n\r\n\r\n#test graph:\r\n#topBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n#line1 = [\"\", 91, 92, 93, 94, \"\"]\r\n#line2 = [\"\", 95, 96, 97, 98, \"\"]\r\n#line3 = [\"\", 99, 10, 11, 12, \"\"]\r\n#line4 = [\"\", 13, 14, 15, 16, \"\"]\r\n#bottomBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n\r\n\r\n\r\n#downRight check\r\n#jhvouhf[hwfhiweh[wh[whf[ifghjkl;\r\n\r\n\r\n\r\n\r\n#topBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n#line1 = [\"\", 1, 2, 3, 4, \"\"]\r\n#line2 = [\"\", 5, 6, 7, 8, \"\"]\r\n#line3 = [\"\", 9, 10, 11, 12, \"\"]\r\n#line4 = [\"\", 13, 14, 15, 16, \"\"]\r\n#bottomBoarder = [\"\", \"\", \"\", \"\", \"\", \"\"]\r\n\r\n    #IDLE Test\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Real_Graph_Challenge.py b/Real_Graph_Challenge.py
--- a/Real_Graph_Challenge.py	(revision 29a668c61fa3a4b9f94395de7249f81e68e09613)
+++ b/Real_Graph_Challenge.py	(date 1736574596262)
@@ -1,3 +1,4 @@
+#NO BACK END BRANCH
 BackEnd_TopBoarder = ("", "", "", "", "", "")
 BackEnd_Line1 = ("", 1, 2, 3, 4, "")
 BackEnd_Line2 = ("", 5, 6, 7, 8, "")
